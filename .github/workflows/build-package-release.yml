name: Build and Release Electron App

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

        include:
          - os: windows-latest
            platform: win
            artifact-name: windows-build

          - os: ubuntu-latest
            platform: linux
            artifact-name: linux-build

          - os: macos-latest
            platform: mac
            artifact-name: macos-build

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Setup macOS environment
        if: matrix.os == 'macos-latest'
        run: |
          brew install python@3.10
          export PATH="/opt/homebrew/opt/python@3.10/libexec/bin:$PATH"
          python3.10 -m venv venv
          source venv/bin/activate
          python3.10 --version
          python3.10 -m pip install --upgrade pip setuptools wheel

      - name: Extract version from package.json
        id: get_version
        run: |
          VERSION=$(node -e "console.log(require('./package.json').version)")
          if [[ -z "$VERSION" ]]; then
            echo "Failed to extract version from package.json"
            exit 1
          fi
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          echo "Version extracted: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            source venv/bin/activate
          fi
          npm install
        shell: bash

      - name: Build & package renderer (vpsl-miner) and Electron app ${{ matrix.platform }}
        env:
          APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID || '' }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
          CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.CSC_LINK || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.CSC_KEY_PASSWORD || '' }}
        run: npx nx package electron --configuration=production --verbose
        shell: bash

      - name: Make Electron app ${{ matrix.platform }}
        env:
          APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID || '' }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
          CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.CSC_LINK || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.CSC_KEY_PASSWORD || '' }}
        run: npx nx make electron --verbose
        shell: bash

      - name: Debug directory structure
        run: |
          echo "Root Directory:"
          ls -la
          echo "Dist Directory:"
          ls -la dist
          echo "Executables Directory:"
          ls -la dist/executables
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "mac-arm64 Directory:"
            ls -la dist/executables/mac-arm64
          fi
        shell: bash

      - name: Publish Electron app ${{ matrix.platform }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
          APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_ID || '' }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.APPLE_APP_SPECIFIC_PASSWORD || '' }}
          APPLE_TEAM_ID: ${{ matrix.os == 'macos-latest' && secrets.APPLE_TEAM_ID || '' }}
          CSC_LINK: ${{ matrix.os == 'macos-latest' && secrets.CSC_LINK || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.CSC_KEY_PASSWORD || '' }}
        run: npx electron-builder --publish always
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.os == 'windows-latest' && format('dist/executables/dFusion-DLP-miner-{0}.exe', steps.get_version.outputs.version) }}
            ${{ matrix.os == 'ubuntu-latest' && format('dist/executables/dFusion-DLP-miner-{0}.AppImage', steps.get_version.outputs.version) }}
            ${{ matrix.os == 'macos-latest' && format('dist/executables/dFusion-DLP-miner-{0}.dmg', steps.get_version.outputs.version) }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: artifacts/**/*
